/*******************************************************************************
 * Copyright (C) 2016  Thomas Fritsch.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/

/**
 * PostScript grammar.
 * 
 * There is no point to use  with org.eclipse.xtext.common.Terminals
 * because we would need to override most of it (ID, STRING, SL_COMMENT, WS)
 * 
 * @author Thomas Fritsch - initial API and implementation
 */
grammar de.tfritsch.psdt.Postscript hidden(WS, SL_COMMENT, DSC_COMMENT)

generate postscript "http://www.tfritsch.de/psdt/Postscript"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

PSFile:
	{PSFile}
	objects+=PSObject*;

PSObject:
	PSLiteralName | PSImmediatelyEvaluatedName | PSExecutableName | PSInt | PSFloat | PSString | PSProcedure | PSArray |
	PSDictionary | PSUnparsedData;

PSProcedure:
	{PSProcedure}
	'{' objects+=PSObject* '}';

PSArray:
	{PSArray}
	'[' objects+=PSObject* ']';

PSDictionary:
	{PSDictionary}
	'<<' objects+=PSObject* '>>';

PSLiteralName:
	name=LITERAL_ID;

PSImmediatelyEvaluatedName:
	name=IMMEDIATELY_EVALUATED_ID;

PSExecutableName:
	name=ID;

PSUnparsedData:
	data=UNPARSED_DATA;

PSInt:
	i=INT;

PSFloat:
	f=FLOAT;

PSString:
	bytes=STRING | bytes=ASCII_HEX_STRING | bytes=ASCII_85_STRING;

terminal STRING returns ecore::EByteArray:
	'(' STRING_PART* ')'; // detailed syntax check done by STRINGValueConverter

terminal fragment STRING_PART:
	!('\\' | '(' | ')') | ('\\'.) | ('(' STRING_PART* ')');

terminal ASCII_HEX_STRING returns ecore::EByteArray:
	'<' !('<' | '~' | '>')* '>'; // detailed syntax check done by ASCIIHexStringValueConverter

terminal ASCII_85_STRING returns ecore::EByteArray:
	'<~'->'~>'; // detailed syntax check done by ASCII85StringValueConverter

terminal INT returns ecore::EInt:
	(('+' | '-')? ('0'..'9')+) | RADIX_INT;

terminal fragment RADIX_INT:
	('0'..'9')+ '#' ('0'..'9' | 'a'..'z' | 'A'..'Z')+;

terminal FLOAT returns ecore::EFloat:
	('+' | '-')? ('0'..'9')+ '.' ('0'..'9')* EXP? |
	('+' | '-')? '.' ('0'..'9')+ EXP? |
	('+' | '-')? ('0'..'9')+ EXP;

terminal fragment EXP:
	('E' | 'e') ('+' | '-')? ('0'..'9')+;

terminal LITERAL_ID:
	'/' (!DELIM_CHAR)*;

terminal IMMEDIATELY_EVALUATED_ID:
	'//' (!DELIM_CHAR)*;

terminal ID:
	(!('0'..'9' | DELIM_CHAR)) (!DELIM_CHAR)*;

terminal fragment DELIM_CHAR:
	'(' | ')' | '<' | '>' | '[' | ']' | '{' | '}' | '/' | '%' | ' ' | '\t' | '\r' | '\n' | '\f' | '\u0000';

terminal UNPARSED_DATA:
	DSC_BEGIN_DATA .* DSC_END_DATA;

terminal fragment DSC_BEGIN_DATA:
	'%%BeginData:' !('\n' | '\f')* ('\n' | '\f');

terminal fragment DSC_END_DATA:
	'%%EndData' !('\n' | '\f')* ('\n' | '\f');

terminal DSC_COMMENT:
	('%!PS' | '%%') !('\n' | '\f')* ('\n' | '\f');

terminal SL_COMMENT:
	'%' !('\n' | '\f')* ('\n' | '\f')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n' | '\f' | '\u0000')+;
